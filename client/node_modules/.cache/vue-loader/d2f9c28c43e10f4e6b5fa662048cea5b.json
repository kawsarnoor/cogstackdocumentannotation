{"remainingRequest":"/Users/kawsarnoor/Desktop/cogstack/annotationtool/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kawsarnoor/Desktop/cogstack/annotationtool/client/src/components/Progress.vue?vue&type=style&index=0&id=529603dd&scoped=true&lang=css&","dependencies":[{"path":"/Users/kawsarnoor/Desktop/cogstack/annotationtool/client/src/components/Progress.vue","mtime":1613428061667},{"path":"/Users/kawsarnoor/Desktop/cogstack/annotationtool/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/annotationtool/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/annotationtool/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/annotationtool/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/annotationtool/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNwcm9ncmVzc3sKICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOwogICAgcGFkZGluZzogMHB4IDBweDsKfQoub3ZlcmZsb3dBdXRvIHsKICBvdmVyZmxvdy14OiBoaWRkZW47CiAgb3ZlcmZsb3cteTogYXV0bzsKICBoZWlnaHQ6IGNhbGMoMTAwdmggLSA2MDBweCk7Cn0KCi5saXN0LWdyb3VwewogICAgbWF4LWhlaWdodDogNTAwcHg7CiAgICBtYXJnaW4tYm90dG9tOiAxMHB4OwogICAgb3ZlcmZsb3c6c2Nyb2xsOwogICAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoOwp9CgoK"},{"version":3,"sources":["Progress.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Progress.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<!-- eslint-disable -->\n    <div class=\"container\" id=\"progress\">\n        <!-- <img alt=\"Vue logo\" src=\"../assets/uclh.png\" style=\"max-width: 60%\"> -->\n        <div class=\"card text-center\" style=\"display: inline-block;\">\n            <div class=\"card-header\">\n                <div class=\"column is-two-thirds\">Finished {{ completed_ids.length}} of {{ document_ids.length}} </div>\n                <span class=\"column\" @click=\"goToCurrentIndexPage()\"><a><i class=\"fa fa-bookmark fa-1x\"></i></a></span>\n            </div>\n            <div class=\"list-group list-group-flush\">\n                <template v-for=\"(docindx, idx) in viewable_documents\">\n                    <div class=\"btn-group\" :key=\"docindx\" role=\"group\" aria-label=\"Basic example\">\n                        <div class=\"input-group-prepend\">\n                            <div class=\"input-group-text\" id=\"btnGroupAddon\">{{ docindx }}</div>\n                        </div>\n                        <button v-if=\"docindx==currentidx\" :key=\"docindx\"  type=\"button\" class=\"list-group-item list-group-item-action active\" @click=\"goToDocument(docindx)\"><span v-if=\"completed_ids.includes(docindx)\"  style='font-size:15px;'>&#10004;</span> Doc {{ docindx }}</button>\n                        <button v-else type=\"button\" :key=\"docindx\"  class=\"list-group-item list-group-item-action\" @click=\"goToDocument(docindx)\"><span v-if=\"completed_ids.includes(docindx)\"  style='font-size:15px;'>&#10004;</span> Doc {{ docindx }}</button>\n                    </div>\n                </template>\n            </div>\n        </div>\n        <div>\n            <button class=\"btn btn-primary\" type=\"button\" style=\"margin-right: 15px; margin-top: 10px;\" @click=\"previousPage()\">Prev</button>\n            <button class=\"btn btn-primary\" type=\"button\" style=\"margin-left: 15px; margin-top: 10px;\" @click=\"nextPage()\">Next</button>\n        </div>\n    </div>\n</template>\n\n<script>\n/*eslint-disable*/\nimport axios from 'axios';\nimport { EventBus } from \"../main.js\";\n\nexport default {\n  name: 'Progess',\n  props: {\n    numbers: Number,\n    projectid: Number,\n  },\n\n  data() {\n      return {\n        projectid: Number,\n        nlptasktype: '',\n        currentidx: Number,\n        document_ids: [],\n        completed_ids: [],\n        viewable_documents: [],\n        documents_per_page: Number,\n        pageNumber: Number,\n        root_api: process.env.VUE_APP_URL,\n      };\n  },\n  methods: {\n\n    nextPage() {\n           console.log('getting next page')\n\n           this.pageNumber = this.pageNumber + 1\n           var top_doc = (this.pageNumber) * this.documents_per_page;\n           var bottom_doc = top_doc + this.documents_per_page;\n           \n           if(this.document_ids.length > top_doc - 1) {\n                this.viewable_documents = this.document_ids.slice(top_doc, bottom_doc)\n\n        //    if (this.document_ids.includes(top_doc+1)) {\n        //         this.viewable_documents = this.document_ids.slice(top_doc, bottom_doc)\n           } else {\n               this.pageNumber = this.pageNumber - 1 // stay on the same page\n           }\n    },\n    \n    previousPage() {\n\n        console.log('getting previous page')\n        if (this.pageNumber < 1) {\n            return;\n        }\n        this.pageNumber = this.pageNumber - 1\n        var top_doc = (this.pageNumber) * this.documents_per_page\n        var bottom_doc = top_doc + this.documents_per_page\n        this.viewable_documents = this.document_ids.slice(top_doc, bottom_doc)\n\n    },\n\n    goToCurrentIndexPage() {\n\n        var lastDocument = Math.max(...this.completed_ids)\n        var pos = (this.document_ids).indexOf(lastDocument)\n        \n        this.pageNumber = Math.floor(pos/this.documents_per_page);\n        var top_doc = (this.pageNumber) * this.documents_per_page\n        var bottom_doc = top_doc + this.documents_per_page\n\n        this.currentidx = lastDocument\n        this.viewable_documents = this.document_ids.slice(top_doc, bottom_doc)\n    },\n\n    next() {\n            if (this.currentidx <  this.document_ids[this.document_ids.length - 1] ) {\n                this.currentidx = this.currentidx + 1;\n                console.log('going forward to document ', this.currentidx);\n                EventBus.$emit(\"number-added\", this.currentidx); \n\n                if (this.currentidx > Math.max(...this.viewable_documents)){\n                    this.nextPage()\n                }\n\n            }\n            else {\n                console.log('End of dataset');\n            }\n    },\n\n    prev() {\n            if (this.currentidx > this.document_ids[0]) {\n                this.currentidx = this.currentidx - 1;\n                console.log('going back to document ', this.currentidx);\n                EventBus.$emit(\"number-added\", this.currentidx); \n\n                if (this.currentidx < Math.min(...this.viewable_documents)){\n                    this.previousPage()\n                }\n            }\n            else {\n                console.log('Start of dataset');\n            }\n    },\n\n    goToDocument(i) {\n        this.currentidx = i;\n        EventBus.$emit(\"number-added\", i);\n    }\n\n  },\n\n  created() {\n    \n    // Refresh page at start of component creation. Is there a more Vue-ish way of doing this?\n    if (localStorage.getItem('forceRefresh') === 'refresh') {\n        localStorage.setItem('forceRefresh', '');\n        window.location.reload();\n    }\n\n    this.currentidx = 1; // retrieve using api\n    this.pageNumber = -1;\n    this.documents_per_page = 10\n\n    console.log('Progresss loaded with cid: ', this.currentidx);\n\n    const path = 'http://' + this.root_api + ':5001/getCompleted';\n    axios.post(path, {'project_id': this.projectid}, {headers: {'Authorization': localStorage.getItem('jwt')}})\n        .then((res) => {\n            this.document_ids = res.data.document_ids;\n            this.completed_ids = res.data.completed_ids;\n            this.nlptasktype = res.data.nlptasktype;\n            this.currentidx = this.document_ids[0];\n\n            // load in first x documents\n            this.nextPage();\n        })\n        .catch((error) => {\n            console.error(error);\n    });\n\n    // Event listener for previous and next document\n    window.addEventListener('keydown', (e) => {\n      if (e.key == 'ArrowLeft') {\n        this.prev();\n      }\n      if (e.key == 'ArrowRight') {\n        this.next();\n      }\n    });\n\n    EventBus.$on(\"label-added\", idx => {\n      console.log('label-added: ',idx);\n      if (!this.completed_ids.includes(idx)) {\n            const path = 'http://' + this.root_api + ':5001/getCompleted';\n            axios.post(path, {'project_id': this.projectid}, {headers: {'Authorization': localStorage.getItem('jwt')}})\n            .then((res) => {\n                this.document_ids = res.data.document_ids;\n                this.completed_ids = res.data.completed_ids;\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n      }\n      // This is the code that we use to automatically move to next document. Useful only for multiclass\n      if (this.nlptasktype == 'multiclass'){\n        this.next();\n      }\n    });\n\n  }\n\n  \n};\n</script>\n\n<style scoped>\n\n#progress{\n    background-color: white;\n    padding: 0px 0px;\n}\n.overflowAuto {\n  overflow-x: hidden;\n  overflow-y: auto;\n  height: calc(100vh - 600px);\n}\n\n.list-group{\n    max-height: 500px;\n    margin-bottom: 10px;\n    overflow:scroll;\n    -webkit-overflow-scrolling: touch;\n}\n\n\n</style>\n"]}]}