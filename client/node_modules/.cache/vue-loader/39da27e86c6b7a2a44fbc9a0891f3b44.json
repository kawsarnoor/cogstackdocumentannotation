{"remainingRequest":"/Users/kawsarnoor/Desktop/cogstack/projects/allergies/annotationTool/client/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/kawsarnoor/Desktop/cogstack/projects/allergies/annotationTool/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kawsarnoor/Desktop/cogstack/projects/allergies/annotationTool/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kawsarnoor/Desktop/cogstack/projects/allergies/annotationTool/client/src/components/Document.vue?vue&type=template&id=5ffe286a&scoped=true&","dependencies":[{"path":"/Users/kawsarnoor/Desktop/cogstack/projects/allergies/annotationTool/client/src/components/Document.vue","mtime":1590052831910},{"path":"/Users/kawsarnoor/Desktop/cogstack/projects/allergies/annotationTool/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/projects/allergies/annotationTool/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/projects/allergies/annotationTool/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/projects/allergies/annotationTool/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}